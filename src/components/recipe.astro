---
import type { Props } from "@astrojs/starlight/props";
import { Recipe as CooklangRecipe } from "@cooklang/cooklang-ts";
import Default from "@astrojs/starlight/components/MarkdownContent.astro";

const isRecipe = Astro.props.slug.includes("recipes/");
const recipe = new CooklangRecipe(Astro.props.entry.body, {
    defaultIngredientAmount: "etwas",
});
const meta_array = Array.from(Object.entries(recipe.metadata));
const contains_source = meta_array.find(([key, _value]) => "source" === key.toLowerCase() || "quelle" === key.toLowerCase());
const source_url_raw = (contains_source ?? [])[1] ?? "";
const source_url = source_url_raw.replace("<", "").replace(">", "");
---

{
    isRecipe ? (
        <Default {...Astro.props}>
            <article>
                <p class="no-margin-children">
                {(contains_source?.length ?? 0) > 0 ? (
                    <><b>Quelle: </b>{source_url.includes("http") ?  <a href={source_url}>{source_url}</a> : <span>{source_url}</span>}<br/></>
                ) : (
                    <><b>Quelle: </b>Keine Quelle angegeben</><br/>
                )}

                {
                    (contains_source && meta_array.length >= 2) || !contains_source && meta_array.length >= 1 ? 
                    (
                            Array.from(Object.entries(recipe.metadata)).map(
                                ([key, value]) =>
                                    key.toLowerCase() === "source" || key.toLowerCase() === "quelle" ? null : (
                                        <>
                                            <b class="capitalize">{key}</b>:
                                            {value.replace("%", " ")}<br/>
                                        </>
                                    ),
                            )
                    ) :
                    (
                        <></>
                        )
                }
                </p>
               
                <div class="grid-container">
                    <div class="box p-4 border border-zinc-300 rounded min-w-[10rem] w-full md:w-auto relative">
                        <h2 id="zutaten">Zutaten</h2>
                        <ul>
                            {recipe.ingredients.map((ingredient) => (
                                <li>
                                    {["etwas"].includes(String(ingredient.quantity)) ? (
                                        <>
                                            {ingredient.quantity}&nbsp;{ingredient.name}
                                        </>
                                    ) : (
                                        <>
                                            {ingredient.name} â€” {ingredient.quantity}{" "}
                                            {ingredient.units}
                                        </>
                                    )}
                                </li>
                            ))}
                        </ul>
                    </div>

                    {recipe.cookwares.length > 0 ? (
                    <div class="box p-4 border border-zinc-300 rounded min-w-[10rem] w-full md:w-auto relative">
                        <h2 id="geraete">Hilfsmittel</h2>
                        <ul>
                            {recipe.cookwares.map((cookware) => (
                                <li>
                                    {cookware.quantity}&nbsp;{cookware.name}
                                </li>
                            ))}
                        </ul>
                    </div>) : null}

                </div>

                <h2 id="zubereitung">Zubereitung</h2>
                <ol>
                    {recipe.steps.map((step) => (
                        <li class="leading-loose">
                            {step.map((text: any) => {
                                if (text.type === "text") {
                                    return text.value;
                                } else if (text.type === "ingredient") {
                                    return (
                                        <span class="rounded-full px-2 py-1 bg-green-200 text-black whitespace-nowrap">
                                            {text.quantity === "etwas" ? (
                                                <>{text.name}</>
                                            ) : (
                                                <>
                                                    {text.quantity} {text.units}{" "}
                                                    {text.name}
                                                </>
                                            )}
                                        </span>
                                    );
                                } else if (text.type === "cookware") {
                                    return (
                                        <span class="rounded-full px-2 py-1 bg-cyan-200 text-black whitespace-nowrap">
                                            {text.quantity}&nbsp;{text.name}
                                        </span>
                                    );
                                } else if (text.type === "timer") {
                                    return (
                                        <span class="rounded-full px-2 py-1 bg-red-200 text-black whitespace-nowrap">
                                            {text.quantity}&nbsp;{text.units}
                                        </span>
                                    );
                                } else {
                                    return "Error";
                                }
                            })}
                        </li>
                    ))}
                </ol>
            </article>
        </Default>
        <style>
            .grid-container {
                display: grid;
                grid-auto-flow: dense;
                gap: 1rem;
                grid-template-columns: repeat(auto-fit, minmax(min(100%, 100px), 1fr));
                container-type: inline-size;
            }

            .box {
                display: grid;
                grid-row: span 2;
                grid-template-rows: subgrid;
                margin: 0 !important;
            }

            .no-margin-children > * {
                margin: 0 !important;
            }
        </style>
    ) : (
        <Default {...Astro.props}>
            <slot />
        </Default>
    )
}
